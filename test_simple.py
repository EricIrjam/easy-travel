#!/usr/bin/env python3
"""
Test simple du syst√®me Easy Travel
"""

import os
import sys
from pathlib import Path


def main():
    print("üöÄ Easy Travel - Test Simple")
    print("=" * 40)

    # V√©rifications de base
    print("1. V√©rification de l'environnement...")

    # V√©rifier que nous sommes dans le bon r√©pertoire
    if not os.path.exists("app_enhanced.py"):
        print("‚ùå Erreur: app_enhanced.py non trouv√©")
        print("   Assurez-vous d'√™tre dans le r√©pertoire easy_travel-chatbot")
        return False

    print("‚úÖ Fichiers principaux d√©tect√©s")

    # V√©rifier la configuration .env
    if not os.path.exists(".env"):
        print("‚ùå Erreur: fichier .env manquant")
        return False

    print("‚úÖ Configuration .env trouv√©e")

    # V√©rifier les d√©pendances
    print("\n2. Test des imports...")

    # Ajouter le chemin au PYTHONPATH
    sys.path.insert(0, str(Path(__file__).parent))

    try:
        import streamlit as st

        print("‚úÖ Streamlit disponible")
    except ImportError:
        print("‚ùå Streamlit non install√©")
        print("   Installez avec: pip install streamlit")
        return False

    try:
        import openai

        print("‚úÖ OpenAI disponible")
    except ImportError:
        print("‚ùå OpenAI non install√©")
        return False

    try:
        from chatbot.bot import EasyTravelChatbot

        print("‚úÖ Chatbot Easy Travel import√©")
    except ImportError as e:
        print(f"‚ùå Erreur import chatbot: {e}")
        return False

    try:
        from services.local_data_service import LocalDataService

        print("‚úÖ Service donn√©es locales import√©")
    except ImportError as e:
        print(f"‚ùå Erreur import donn√©es locales: {e}")
        return False

    try:
        from services.weather_service import WeatherService

        print("‚úÖ Service m√©t√©o import√©")
    except ImportError as e:
        print(f"‚ùå Erreur import m√©t√©o: {e}")
        return False

    # Test rapide des services
    print("\n3. Test des services...")

    try:
        # Test service donn√©es locales
        local_service = LocalDataService()
        paris_info = local_service.get_city_info("paris")
        if paris_info:
            print(f"‚úÖ Donn√©es Paris: {paris_info.name}")
        else:
            print("‚ö†Ô∏è  Donn√©es Paris non trouv√©es (sera cr√©√© au premier lancement)")

        # Test service m√©t√©o
        weather_service = WeatherService()
        print("‚úÖ Service m√©t√©o initialis√©")

        # Test chatbot
        bot = EasyTravelChatbot()
        print("‚úÖ Chatbot initialis√©")

    except Exception as e:
        print(f"‚ùå Erreur lors du test des services: {e}")
        return False

    print("\n‚úÖ SYST√àME READY!")
    print("\nüöÄ Pour lancer l'application:")
    print("   streamlit run app_enhanced.py")
    print("\nüì± L'interface s'ouvrira dans votre navigateur")
    print("   Vous pourrez utiliser:")
    print("   ‚Ä¢ Mode parcours guid√©")
    print("   ‚Ä¢ Chat libre avec IA")
    print("   ‚Ä¢ Donn√©es m√©t√©o en temps r√©el")
    print("   ‚Ä¢ Recommandations personnalis√©es")

    return True


if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nüéâ Test termin√© avec succ√®s!")
            sys.exit(0)
        else:
            print("\n‚ùå √âchec du test")
            sys.exit(1)
    except Exception as e:
        print(f"\nüí• Erreur inattendue: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
